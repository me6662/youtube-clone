1. 내가 깃허브에 몇개의 HTML 과 CSS 그리고 JS 를 업로드해서
무료 호스팅으로 접근하면 접근이 되는데
이때 깃허브에 있는 서버들은 각각의 파일을 URL 로 해서 나에게 HTML 파일을 응답 해준다.


현재 우리가 Express 로 만드는 서버 또한 위의 것과 동일하다
home URL 이던지 혹은 다른 URL 에 응답을 해주는데 보통 일반적으로는 HTML 로 할것이다.

그러면 우리가 지금만드는 것들 app.get 도 그렇고 미들웨어도 그렇고 이런것들은 github 서버에서는 다 코딩이 되어서 구현이 되어 있는 것이다.


그렇다면 내가 서버 만들고 깃허브 혹은 다른 호스팅업체를 통해 호스팅할 수 있을까?

아직정확히 모르겠지만 될것 같다!
호스팅업체 나 깃허브 서버에서 하는것들은 파일명을 URL 로 해서 나에게 파일들을 보여주는것 (HTML 이 됬든 뭐 JS 가 됬든)

근데 여기에 내가 만든 서버를 호스팅 한다면! 
내가 원하는 URL 로 HTML 들에 접근이 가능해지는것. 그니까 서버(호스팅) 에 서버를 올리는 것이지

존나 멋있네 시발꺼


2.  GET POST 는 서버가 아니라 유저를 1인칭으로 하는 뜻이다.
GET : 유저가 요청한 URL 을 통해 데이터를 서버로부터 얻는다.(GET)
POST : 유저가 서버에 데이터를 전송(POST) 한다. 

3. handler 함수에서 req, res
req : 유저가 서버에 보내는 객체 (require) 예 )) 패스워드, 로그인정보 (유저가 서버에 보내는것= 요청 이라고 함.)
res : 서버가 유저에 보내는 객체 (respond) 예 )) html , text 등등 (요청에 대한응답)


4. 호스팅 할경우 인터넷 세계에서 어떻게 우리가 만든 서버가 작동하는가
내생각엔, 특정 url 을 접속할 경우 (이것은 아직 배우진 않았다.)
내가 터미널에서 npm start 하는 것처럼 동작이 될것이다.
그러면 자동적으로 init.js 가 수행될 것이다. (package.json) 

또한 가지 중요한 것은 이렇게 유저가 브라우저에 url 을 쳐서 init.js 를 수행하게 되면 
유저는 "/" 에 요청(req) 한셈이 되고, 서버는 그에 해당하는 응답(res)을 주게 될 것이다.

그리고 이 요청과 응답 사이에 끼는 중간과정들이 Middleware.

5. 유저와 서버사이의 상호작용에서 핸들링 함수들은 3가지 파라미터를 갖게 되는데
req , res , next 이다.

req : 유저 가 서버에게 보내는 데이터 객체 (특정 route 로 접속 요청 시 자동으로 보내짐)
res : 서버가 유저에게 응답하는 데이터 객체
next : 미들웨어가 함수진행 권한을 다음 미들웨어 혹은 마지막 응답함수 (유저에게 뭔가를 리턴해야하는 함수...) 에게 건네기 위해 사용.


6. body parser , cookie parser
일단 내가 해석하기로는... 곧 배우게 된다함사실

body parser : 유저가 서버에 뭔가 데이터를 보내면 (post 든, url 써서 get 함수 호출하든) , 핸들링함수에서  req 파라미터를 통해 데이터를 받는데, 
이 과정에서 유저가 보내는 데이터를 form 이라고 표현했고 노마드형이 그거를 해석해서 req 파라미터에서 찾아쓸수 있게 해주는 미들웨어가 body parser 라고 생각된다....
그래서 그 form 이라는 거를 해석하는 방법이 옵션으로 쓰게 되있음 미들웨어 선언할떄
json / text / urlencoded (html form 해석) / 
서버가 유저가 전송하는게 뭔지 알아야 한다고 표현했다. 노마드형이 그럼 유추해보자면 
유저가 보내는 데이터를 서버가 적절히 해석하기 위해서는 이 body Parser 를 미들웨어로 선언해주고 옵션을 적절히 선택을 해줘야 한다 이 의미같다.
형님 최종정의 : 서버가 유저가 보낸 데이터를 이해하는 방법

cookie parser : 유저의 로그인정보(?) 뭐 이딴거를 cookie 에 저장하고 세션 뭐 어쩌고 얘기하는데 시발 나중에 배운다고 한다. 일단 미들웨어 설치 조져라... 시발년아...
형님 최종정의 : 서버가 유저가 보낸 쿠키를 이해하는 방법


