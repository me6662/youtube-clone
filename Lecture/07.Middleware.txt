
///////////////////////////////// Middle Ware ///////////////////////////////////

Epxress 에서 Middle ware 는 처리가 끝날 때까지 연결되어 있는 어떤 것 (?) ... 시벌?
우선 어떻게 연결이 시작되는가? 이다, 어떻게 request 가 시작되는지..

시작은 브라우저부터이다. 

User 가 웹사이트에 접속하려고 할 때, 브라우저는 index.js 를 실행하려 할테고, 
app 객체 (express()) 는 home route ("/") 가 존재하는지 살펴보게 된다. 그 다음 home 에 연결된 handleHome 메소드를 그다음에 실행한다.
handleHome 은 그다음에 app 가 건네준 respond object 를 통해서  "hello 시발놈아" 를 응답한다.

하지만 보통 연결은 그 흐름이 그렇게 간단하게 되지 않는다. 
유저와 마지막 응답사이에 중간과정이 있게된다. (복잡한 웹사이트들에는 있나봄. 지금 좆밥코스라서 감이안오는 것이라 생각함.)
이게 바로 middle ware 다.

그렇게 해서 만들어 보았다 (간단히 get 함수에 핸들러 두개를 두면 된다.)
근데 중요한 것은, middleware 에게 request 가 왔을 때 , 그 request를 가지고 respond를 할 권한을 줘야 한다는 것이다. 


express의 모든 route와 그를 처리하는 handler들은 기본적으로 3개의 object를 app 로부터 건네 받는데, next라는 것이 있다. 
단지 마지막으로 respond를 하는 handler 들에는 next를 쓰지 않는다. 

 next(); 를 미들웨어에서 하면 다음으로 진행된다.

middleware 는 양파라고 생각하면 됨, 최종 respond 까지 여러겹의 layer 가 있는 것이고, middleware 가 그 layer 이다.
양파의 중심에 있는 최종함수가 user 에게 무엇인가를 return 하는 것이다. 
물론 반환할게 없거나 (최종함수) , 미들웨어함수가 next() 를 안해주면 계속 로딩으로 뜰것임.

미들웨어는 내가 원하는만큼 가질 수 가 있다. 왜그렇게 하냐, 그게 존나 날 편하게 해주기 때문이다. 
예를들어 미들웨어는 유저의 로그인여부를 체크하기도 하고, 파일 전송중간에 가로채기도 하며, (딴데로 업로드)
로그를 작성하기도 한다.

또한 아래를 유념하자.

// Middleware 만들기 (request 와 응답 사이의 과정)
const betweenHome = (req, res, next) => {
  console.log("Between");
  next(); // 다음을 진행하라는 소리.
};

const betweenTest = (req, res, next) => {
  console.log("I only test middleware procedure.");
  next();
};

//app.get("/", betweenHome, handleHome); // "/" 는 home url 주소. , 브라우저가 get 함수를 실행했으므로 (user 요청) 응답해야됨.
// betweenHome 은 request 와 respond 사이에 껴있음. 오직 "/" route 에만 작용.


app.use(betweenHome); // 이렇게 하면, 모든 웹사이트 응답에 사이에 끼게 됨.
// 여기서 순서가 중요한데 get 에서 route 를 찾기전에 이 middle ware 들이 실행되는 것이다.
// request 가 와서 app 는 "/" 와 "/profile" route 를 찾기 전에 betweenHome 미들웨어를 무조건 실행하게 된다. 이게 더 뒤로 가거나 하면 안됨
// 그리고 route 전에는 원하는 만큼의 middleware를 써도된다.

app.get("/", handleHome);

app.use(betweenTest); // 이새끼는 home 응답에서는 안되고 /profile 찾을때만 수행이 되는 미들웨어임.

app.get("/profile", handleProfile); // "/profile" 이렇게 route 가 생성 (단순히 객체가 생성된다고 생각하면 될듯) 되고 handler 와 묶임.

app.listen(PORT, handleListening); // port Number Listen...


///////////////////////////////// Middle Ware - Morgan ///////////////////////////////////

Morgan 은 Middleware 중 하나인데 logging 에 도움을 준다. (로그 남기는거다.)

npm install morgan 
으로 morgan 모듈 설치 가능하다.


app.use(morgan("tiny"));

app.get("/", handleHome);

app.get("/profile", handleProfile); // "/profile" 이렇게 route 가 생성 (단순히 객체가 생성된다고 생각하면 될듯) 되고 handler 와 묶임.

이전 미들웨어를 지우고 이렇게 한다음 profile 접속해주면 터미널에 이렇게 뜬다. 

GET /profile 304 - - 0.531 ms

app.use(morgan("combined")); 이렇게 바꾸고 profile 접속하면 

::1 - - [27/Jul/2020:10:46:12 +0000] "GET /profile HTTP/1.1" 304 - "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36"

와 같이 나옴. 어떤 브라우저인지 어떤 종류의 접속인지 자세히 나옴.
그외에도 common , dev 등등 있다.
미들웨어는 진짜 존나게 많다. 수백개가 있음

///////////////////////////////// Middle Ware - Helmet ///////////////////////////////////

nodeJS 보안에 도움을 주는 미들웨어 이다. 
npm install helmet 하면 바로 설치 조질 수 있다.

app.use(helmet()); // morgan 밑에다가 살며시 써보면 끝이다.


///////////////////////////////// Middle Ware 연결 가로채기 ///////////////////////////////////

middleware 가 next() 안쓰고 res.send() 로 route 전에 응답을 가로채버리면
브라우저 요청과 서버 응답 사이에 연결이 성사가 되지 않는다.


const middleware = (req, res, next) => {
  res.send("not happnening. by MW.");
};

app.get("/", middleware, handleHome);
바로 이런식이다.

///////////////////////////////// Middle Ware - Cookie Parser, Body Parser ///////////////////////////////////

둘다 express 와 연관된 middle ware 이다.

1. npm install body-Parser
보통 브라우저에서 route 를 찾아서 응답요청을 할때, req 를 통해서 특정 form 을 보낸다. form 패스워드나 아이디가 될수도 있고 그런데
이걸 받기 위해서는 body-parser 라는 것이 필요하게 된다.
말 그대로 body 에서 데이터를 받아오는(?) 시팔 형... 뭔소리야
> 이걸 쓸때는 정해줘야할 옵션이 있음
> json , text 등 여러가지에 대해 이해해야됨 왜나면 서버는 user 가 무엇을 전송하는지 알아야 되기 때문임

- 만약에 json 을 전송한다면, 서버가 json 을 이해하길 바래야됨.
- 만약에 html Form 을 전송한다면, 서버가 url encoded 라는걸 이해하길 바래야됨.
- 그래서 이것들이 우리가 서버를 설정하는 내용이며 서버가 유저로부터 받은 데이터를 이해하는 방법.


2. npm install cookie-parser
유저정보의 경우는 쿠키에 저장하게 됨. 세션을 다루기 위해서 (?) 시팔 형...

- 이거는 유저로부터 받은 쿠키를 이해하는 방법.